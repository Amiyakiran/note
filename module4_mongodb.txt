MODULE -IV
----------

MONGODB
-----------
Sql Vs NoSql
-----------
SQL (Structured Query Language) and NoSQL (Not Only SQL) are two broad categories of database management systems, each with its own set of characteristics, advantages, and use cases.

SQL (Relational Databases)
-------------------------
Data Structure :  SQL databases are relational and follow a predefined schema.
		  Data is organized into tables, with rows representing individual records and columns representing attributes.

Schema:		  Schema is rigid and must be defined before data is inserted.
		  Changes to the schema can be complex and require careful management.

Transactions:     Support for ACID (Atomicity, Consistency, Isolation, Durability) transactions ensures data integrity.

Use Cases:	  Well-suited for applications with complex relationships between data.
		  Commonly used for financial systems, enterprise applications, and systems where data integrity is crucial.

Examples:	 MySQL, PostgreSQL, Oracle, Microsoft SQL Server.


NoSQL (Non-relational Databases):
---------------------------------
Data Structure:		NoSQL databases can have various data models, including document-oriented, key-value pairs, wide-column stores, or graph databases.
			The data structure is more flexible, allowing for dynamic and evolving schemas.

Schema:			Schema-less or schema-flexible, enabling easy addition or removal of fields without requiring a predefined structure.

Transactions:		NoSQL databases may sacrifice full ACID transactions for improved performance and scalability.
			Some NoSQL databases provide eventual consistency.

Use Cases:		Well-suited for applications with constantly changing data, high write loads, and scalability requirements.
			Commonly used in big data, real-time web applications, and projects where rapid development and iteration are essential.

Examples:		MongoDB (document-oriented), Cassandra (wide-column store), Redis (key-value), Neo4j (graph).


MONGODB (NoSQL)
---------------
In MongoDB, data is organized into collections, and each document within a collection is a JSON-like BSON(Binary JSON) object.

STRUCTURE
---------
 - A MongoDB deployment can contain multiple databases.Each database contains one or more collections.
 - A collection is a group of MongoDB documents.(equivalent to tables in relational databases But with different schema)
 - A document is a basic unit of data in MongoDB which contains fields, and it is equivalent to a record in a relational database
 - A field is a key-value pair within a document
     - Fields can be of various types, including strings, numbers, arrays, nested documents, etc.
 - A subdocument is a document nested within another document
 - Each document in a MongoDB collection has a unique identifier called an ObjectId



- Local mongodb is called mongodb compass
- cloud mongodb is - mongodb atlas


 Operations
----------------
 commands
     --------
     - open _MONGOSH (mongodb shell)
     
     1) show databases - list out all databases inside your mongodb.
     2) use db_name - to change directory/database.
     3) show collections - to get all collections inside a database.
     4) db.collectionName.find() - to get all documents inside particular collection
     5) db.users.findOne({condition}) - to get a particular document satisfing the condition 
     6) db.users.find().limit(number) - get a particular number of documents.
     7) db.users.find().sort({username:-1}) - sort in descending order
     8) db.users.find().sort({username:1}) - sort in ascending order

     9) db.users.insertOne({username:"neel",email:"neel@gmail.com",password:"neel123",profile:"",github:"",linkedin:""}) - to add new document in a collection.

     10) db.users.insertMany([{username:"sicily",email:"sicily@gmail.com",password:'sicily123',profile:"",github:"",linkedin:""},{username:"Mini",email:"mini@gmail.com",password:"mini123",profile:"",github:"",linkedin:""}])
     
     11) db.users.insertMany([{uname:'jacob',age:18,debt:2000,balance:2600},{uname:'kavi',age:25,debt:12000,balance:50000}])

     12) db.users.insertOne({uname:'kyle',age:30 ,address:{city:'washington DC',zipcode:7896},hobbies:["gamming",'coding',"Driving"]})
 
     13) query based -
            - db.users.find({age:{$lt:25}}) - less than
            - db.users.find({age:{$lte:25}}) - less than or equal to
            - db.users.find({age:{$gt:25}}) - greater than
            - db.users.find({age:{$gte:25}}) - greater than or equal to
            - db.users.find({$or:[{age:{$gt:25}},{age:{$gt:30}}]}) - anyone condition to be true
            - db.users.find({$and:[{age:{$gt:17}},{age:{$lt:30}}]}) - both condition should  be true
            - db.users.find({address:{$exists:true}}) - return the document which have the key
            - db.users.find({address:{$exists:false}}) - return the document which doesnot have the key

            - to compare two keys within the document - $expr

               - db.users.find({$expr:{$gt:["$balance","$debt"]}}) - balance>debt
               - db.users.find({$expr:{$gt:["$debt","$balance"]}}) - debt>balance

      14) update

          - syntax = db.collectionName.updateOne({condition to unqiuly identify the document},{condition to update the document})

          - db.users.updateOne({uname:"jacob"},{$inc:{age:2}}) - increment
          - db.users.updateOne({uname:"jacob"},{$inc:{age:-2}}) - decrement
          - db.users.updateOne({uname:'kyle'},{$push:{hobbies:"cycling"}}) -add a new hobby to user kyle.

      15)delete
          - db.users.deleteOne({uname:"jacob"})  - delete one document
          - db.users.deleteMany({uname:{$exists:true}}) - delete more than one document  

      16) Aggregation operations process multiple documents and return computed results.
          ----------------------
          -Group values from multiple documents together.
           syntax
              {
                  $lookup:
                  {
                     from: <collection to join>,
                     localField: <field from the input documents>,
                     foreignField: <field from the documents of the "from" collection>,
                     as: <output array field>
                  }
               }

         - db.users.aggregate({$lookup:{from:'projects',localField:'_id',foreignField:'userId',as:'userProject'}})



creating project in  Mongodb atlas - cloud based
   ---------------
   1) create project.
   2) give project name.
   3) no change to ownership then click create project.
   4) click database in the sidebar.
   5) click build a dataBase the choose free option. then click create.
   6) change a password - make it as simple as possible without special characters
   7) click create user
   8) click finish and click go to overview.            
   9) again click database in the sidebar.
   10) click browse collections
   11) click my own data.
   12) give database name and collection name then click create button
   13) click network access in the sidebar then click edit button
   14) click allow access from anywhere button - so that anyone can access the database.

   15) click the connect and then the driver
   16) copy the connection string and paste it in the .env file
   17) update the string by giving the password of the corresponding database and the name of the database after the slash and before the question mark.
 


Mongoose 
--------
   - it is a node.js library used to connect the server with the database.
   - installation command - npm i mongoose
   - access the connectionstring from process.env file
   - connect server with the mongodb using connect function of mongoose.
   - import connection.js file in index.js inorder to execute it.
   - inorder to save the data in the mongodb use save() method in mongoose.

schema
------
- Each schema maps to a MongoDB collection and defines the shape of the documents within that collection
- create schema using the schema class in the mongoose library
- syntax
  -----
  const schemaNAME = new mongoose.schema({
  key:value
 })
- in order to access the schema it have to be converted into model
- validation can be given to scheme using validator module 
    - install - npm i validator

   modal
   -----
   - modal  is created using modal function in mongoose 
 - syntax
   ------
   const modelName = mongoose.model('collectionName', schemaName);
  - export modal inorder to access in other pages like controller if written in separate pages.
 


